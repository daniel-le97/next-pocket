/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-floating-promises */
import Head from "next/head";
import ChannelsBar from "@/components/ChannelsBar/ChannelsBar";
import { useEffect } from "react";
import { useRouter } from "next/router";
import { observer } from "mobx-react";
import Pop from "utils/Pop";
import ServerMembersBar from "@/components/MembersBar/ServerMembersBar";
import { AppState } from "AppState";
import { channelsService, messageService, serversService } from "@/services";
import { withAuth, withMember } from "@/middleware";
import TopNavigation from "@/components/Messages/TopNavigation";
import CreateMessage from "@/components/CreateMessage/CreateMessage";
import type { NextPage } from "next";
import ProgressBar from "@badrap/bar-of-progress";
import type { UnsubscribeFunc } from "pocketbase";
import DirectMessageScroll from "../../../../components/GlobalComponents/InfiniteMessageScroll";


interface IProgressBar{
  start(): void;
  finish(): void;
}
const ServerOne: NextPage = () => {
  const router = useRouter();
  const { id, channel } = router.query as { id: string; channel: string };
  // const serverId = router.query.id as string;
  // const channelId = router.query.channel as string;
  useEffect(() => {
    if (!id || !channel) {
      return;
    }

    const fetchServerData = async () => {
      try {
        // AppState.messages = [];
        // AppState.messageLikes = [[]];

        await channelsService.getChannelsByServerId(id);

        await serversService.getMembers(id);
        // console.log(AppState.messages);
      } catch (error) {
        Pop.error(error);
      }
    };
    fetchServerData();
  }, [id]);

  useEffect(() => {

    if (!id || !channel) {
      return;
    }
    let messageSubscribe: UnsubscribeFunc | null;
    
    (async () => {
      const progress = new ProgressBar({
        size: 2,
        color: "#4b60dd",
        className: "bar-of-progress",
        delay: 100,
      }) as unknown as IProgressBar;
      try {
        
        progress.start();
        await channelsService.joinChannel({
          memberId: AppState.user!.id,
          channelId: channel,
        });
        await messageService.getMessagesByChannelId(channel);
        progress.finish();
        messageSubscribe = await messageService.subscribe()

      } catch (error) {
        progress.finish();
        Pop.error(error);
      }
    })();

    return () => {
      messageSubscribe ? messageSubscribe() : null;
    }
  }, [channel]);

  return (
    <>
      <Head>
        <title>next-pocket</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center ">
        <div className="flex  h-screen w-full  ">
          <ChannelsBar />
          <div className=" message-container ">
            <TopNavigation />

            {/* <MessageScroll /> */}
            <DirectMessageScroll/>
            <CreateMessage />
          </div>
          <ServerMembersBar />
        </div>
      </main>
    </>
  );
};

export default observer(withAuth(withMember(ServerOne)));
