/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-floating-promises */
import { type NextPage } from "next";
import Head from "next/head";
import ChannelsBar from "@/components/ChannelsBar/ChannelsBar";
import { Fragment, useEffect, useState } from "react";
import { useRouter } from "next/router";
import { observer } from "mobx-react";

import Pop from "utils/Pop";
import ServerMembersBar from "@/components/MembersBar/ServerMembersBar";
import { AppState } from "AppState";
import { setRedirect } from "utils/Redirect";
import { channelsService, messageService, serversService } from "@/services";
import { withAuth, withMember } from "@/middleware";

import TopNavigation from "@/components/Messages/TopNavigation";
import MessageScroll from "@/components/Messages/MessageScroll";
import CreateMessage from "@/components/Messages/CreateMessage";
import { Transition } from "@headlessui/react";


const Server: NextPage = () => {
  const router = useRouter();
  const id = router.query.id as string;
  const [showing, setShowing] = useState(false);
  let fetched = false
  const fetchServerData = async (id: string) => {
    try {
      AppState.messages = [];
      AppState.messageLikes = [[]];
      await channelsService.getChannelsByServerId(id);
      await messageService.getMessagesByChannelId(AppState.activeChannel!.id);
      await serversService.getMembers(id);
    } catch (error) {
      Pop.error(error);
    }
  };
  useEffect(() => {
    const user = AppState.user;
    if (!user) {
      setRedirect(`/server/${id}`);
      router.push("/login");
      return;
    }
    if (router.query.id){
      if (!fetched) {
        fetched = true
        fetchServerData(id);
        setShowing(true);
      }
    }
  }, []);

  return (
    <>
      <Head>
        <title>next-pocket</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Transition
       
        appear={true}
        show={showing}
        enter="ease-out duration-700"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="ease-in duration-700"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        <main className="flex min-h-screen flex-col items-center justify-center ">
          <div className="flex  h-screen w-full  ">
            <ChannelsBar />
            <div className=" message-container ">
              <TopNavigation />

              <MessageScroll />
              <CreateMessage />
            </div>
            <ServerMembersBar />
          </div>
        </main>
      </Transition>
    </>
  );
};

export default observer(withAuth(withMember(Server)));
