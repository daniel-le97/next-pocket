/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-floating-promises */
import { type NextPage } from "next";
import Head from "next/head";
import ChannelsBar from "@/components/ChannelsBar/ChannelsBar";
import { useEffect } from "react";
import { useRouter } from "next/router";
import { observer } from "mobx-react";
import MessagesContainer from "@/components/Messages/MessageContainer";
import { withAuth } from "@/middleware/WithAuth";
import { withMember } from "@/middleware/WithMember";
import { channelsService } from "@/services/ChannelsService";
import { messageService } from "@/services/MessageService";
import { serversService } from "@/services/ServersService";
import Pop from "utils/Pop";
import ServerMembersBar from "@/components/MembersBar/ServerMembersBar";
import { AppState } from "AppState";
import { setRedirect } from "utils/Redirect";
import { membersService } from "@/services/MembersService";
import { helloS } from "@/services/TestService";



const Server: NextPage = () => {
  const router = useRouter();
  const id = router.query.id as string;

  // const server = AppState.activeServer;
  const user = AppState.user
  // console.log('went')

  useEffect(() => {
    if (!user) {
       setRedirect(`/server/${id}`);
       router.push("/login");
    }
    if (router.query.id) fetchServerData(id);
  }, [router.query.id]);

  return (
    <>
      <Head>
        <title>next-pocket</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center ">
        <div className="flex  w-full h-screen  ">
          <ChannelsBar />
          <MessagesContainer />
          <ServerMembersBar />
        </div>
      </main>
    </>
  );
};
     const fetchServerData = async (id: string) => {
       try {
        
        await helloS()
        // 
         AppState.page = 1;
         await channelsService.getChannelsByServerId(id);
         const channelId = AppState.activeChannel!.id;
         console.log(channelId);
         await messageService.getMessagesByChannelId(channelId);
         await serversService.getMembers(id);
       } catch (error) {
         Pop.error(error);
       }
     };


export default observer(withAuth(withMember(Server)));
